package com.example.ipldream.dreamipl.controller;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.ipldream.dreamipl.db3.entity.Team_match;
import com.example.ipldream.dreamipl.dto.PlayerDto;
import com.example.ipldream.dreamipl.service.PlayerService;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:5173")
public class PlayerController {
	
	private final PlayerService playerService;
	
	
	//this is a constructor injection we can also use field injection
	public PlayerController(PlayerService playerService) {
		this.playerService=playerService;
		
	}
	
	
	 @GetMapping("/matches")
	public ResponseEntity<List<Team_match>> getTodaysMatch(@PathVariable("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date){
		
		 if(date==null) {
			 date=LocalDate.now();
		 }
		List<Team_match> matches=playerService.getTodaysMatch(date);
		return matches!=null?ResponseEntity.ok(matches):ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
	}
	
	
	@GetMapping("/teams")
	public ResponseEntity<List<String>> getAllTeams(){
		
		List<String> teams=playerService.getAllTeams();
		if (teams.isEmpty()) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
	    }
		return ResponseEntity.ok(teams);
	}
	
	
	@GetMapping("/players")
    public ResponseEntity<Map<String, List<PlayerDto>>> getPlayersByTeams(@RequestParam String team1,@RequestParam String team2) {
        Map<String, List<PlayerDto>> response = new HashMap<>();
        response.put("team1", playerService.getPlayersFromBothDBs(team1));
        response.put("team2", playerService.getPlayersFromBothDBs(team2));
        return ResponseEntity.ok(response);
    }
	

}
